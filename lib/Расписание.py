from datetime import timedelta as период

class СостояниеЗадачи():
    нужноДелать = 0
    можноДелать = 1
    нельзяДелать = 2


class Задача():

    имя = None
    своёМаксимальноеВремя = None
    своёМинимальноеВремя = None
    своёЗатраченноеВремя = None
    задачи = None
    корневаяЗадача = None
    краткоеОписание = ""
    детальноеОписание = ""
    событиеПередПереключениемЦикла = None
    событиеПослеПереключенияЦикла = None
    деревоЗадачЗанято = False

    def __init__(self, имя, максимальноеВремя=None, минимальноеВремя=None):
        self.имя = имя
        self.своёМаксимальноеВремя = максимальноеВремя
        self.своёМинимальноеВремя = минимальноеВремя
        self.задачи = []
        self.своёЗатраченноеВремя = период(0)

    def удалиться(self):
        self.очиститьСписокЗадач()

    def очиститьСписокЗадач(self):
        for задача in self.задачи:
            self._удалитьЗадачуИзСписка(задача)

    def _удалитьЗадачуИзСписка(self, задача):
        задача.удалиться()
        self.задачи.remove(задача)

    def удалитьВложеннуюЗадачу(self, удаляемаяЗадача):
        if удаляемаяЗадача in self.задачи:
            self._удалитьЗадачуИзСписка(удаляемаяЗадача)
        else:
            raise(ЗадачаНевСписке)

    def задатьИмя(self, имя):
        self.имя = имя

    def задатьКраткоеОписание(self, описание):
        self.краткоеОписание = описание

    def задатьДетальноеОписание(self, описание):
        self.детальноеОписание = описание

    def создатьЗадачу(self, имяЗадачи, максимальноеВремя=None, минимальноеВремя=None):
        задача = Задача(имяЗадачи, максимальноеВремя, минимальноеВремя)
        задача.корневаяЗадача = self.корневаяЗадача
        self.задачи.append(задача)
        return задача

    def задатьМаксимальноеВремя(self, максимальноеВремя):
        self.своёМаксимальноеВремя = максимальноеВремя

    def задатьМинимальноеВремя(self, минимальноеВремя):
        self.своёМинимальноеВремя = минимальноеВремя

    def максимальноеВремя(self):
        if self.своёМаксимальноеВремя is None:
            return None

        минимум = self.минимальноеВремя()
        if минимум is not None:
            return max(self.своёМаксимальноеВремя, минимум)
        else:
            return self.своёМаксимальноеВремя

    def минимальноеВремя(self):
        сумма = self.суммаМинимумовВложенныхЗадач()
        if self.своёМинимальноеВремя is None:
            return сумма

        if сумма is not None:
            return max(self.своёМинимальноеВремя, сумма)
        else:
            return self.своёМинимальноеВремя

    def суммаМинимумовВложенныхЗадач(self):
        сумма = период(0)
        for задача in self.задачи:
            минимум = задача.минимальноеВремя()
            сумма += минимум if минимум else период(0)
        return сумма if сумма else None

    def затратитьВремя(self, временнойПериод):
        self.своёЗатраченноеВремя += временнойПериод
        if self.своёЗатраченноеВремя < период(0):
            self.своёЗатраченноеВремя = период(0)
        self.корневаяЗадача.проверитьНаПредметКонцаЦикла()

    def затраченноеВремя(self):
        return self.затраченноеВремяГруппы() + self.своёЗатраченноеВремя

    def затраченноеВремяГруппы(self):
        время = период(0)
        for задача in self.задачи:
            время += задача.затраченноеВремя()
        return время

    def проверитьНаПредметКонцаЦикла(self):
        if self.деревоЗадачЗанято:
            return
        if self.выполненЦикл():
            if self.событиеПередПереключениемЦикла:
                self.событиеПередПереключениемЦикла()
            self.переключитьЦикл()
            if self.событиеПослеПереключенияЦикла:
                self.событиеПослеПереключенияЦикла()

    def выполненЦикл(self):
        минимум = self.минимальноеВремя()
        if минимум is None:
            return True
        else:
            if self.затраченноеВремя() >= минимум:
                if len(self.задачи):
                    return all(задача.выполненЦикл() for задача in self.задачи)
                else:
                    return True
            else:
                return False

    def переключитьЦикл(self):
        self.переключитьСвойЦикл()
        self.переключитьЦиклВложеннымЗадачам()

    def переключитьСвойЦикл(self):
        if self.максимальноеВремя() is None or self.затраченноеВремя() <= self.максимальноеВремя():
            self.своёЗатраченноеВремя = период(0)
            return

        self.своёЗатраченноеВремя = self.затраченноеВремя() - self.максимальноеВремя()

    def переключитьЦиклВложеннымЗадачам(self):
        for задача in self.задачи:
            задача.переключитьЦикл()

    def нужноДелать(self):
        return self.состояние() == СостояниеЗадачи.нужноДелать

    def можноДелать(self):
        return self.состояние() == СостояниеЗадачи.можноДелать

    def нельзяДелать(self):
        return self.состояние() == СостояниеЗадачи.нельзяДелать

    def нулевыеЛиОграничения(self):
        return self.максимальноеВремя() == self.минимальноеВремя() == None

    def состояние(self):
        if self.нулевыеЛиОграничения():
            return СостояниеЗадачи.можноДелать

        время = self.затраченноеВремя()
        максимум = self.максимальноеВремя()
        минимум = self.минимальноеВремя()

        if максимум is not None and минимум is not None:
            if время >= максимум:
                return СостояниеЗадачи.нельзяДелать
            if время >= минимум:
                return СостояниеЗадачи.можноДелать
            return СостояниеЗадачи.нужноДелать

        if максимум is not None:
            if время >= максимум:
                return СостояниеЗадачи.нельзяДелать
            else:
                return СостояниеЗадачи.можноДелать

        if минимум is not None:
            if время >= минимум:
                return СостояниеЗадачи.можноДелать
            else:
                return СостояниеЗадачи.нужноДелать

    def __repr__(self):
        return "Задача<%s> затр:%s мин:%s макс:%s" % (self.имя, self.затраченноеВремя(), self.минимальноеВремя(), self.максимальноеВремя())

    def экспортДерева(self):
        def времяВДревовидныйВид(время):
            res = {}
            if время.days:
                res["d"] = время.days
            if время.seconds:
                res["s"] = время.seconds
            return res

        res = {"n": self.имя}

        if self.своёМаксимальноеВремя is not None:
            res[">"] = времяВДревовидныйВид(self.своёМаксимальноеВремя)

        if self.своёМинимальноеВремя is not None:
            res["<"] = времяВДревовидныйВид(self.своёМинимальноеВремя)

        if self.своёЗатраченноеВремя:
            res["x"] = времяВДревовидныйВид(self.своёЗатраченноеВремя)

        if len(self.краткоеОписание):
            res["ko"] = self.краткоеОписание

        if len(self.детальноеОписание):
            res["do"] = self.детальноеОписание

        списокзадач = []
        for задача in self.задачи:
            списокзадач.append(задача.экспортДерева())
        if len(списокзадач):
            res["l"] = списокзадач

        return res

    def загрузитьИзДерева(self, деревоЗадач):
        self.деревоЗадачЗанято = True

        def времяИзДревовидногоВида(времяjson):
            время = период(0)
            if 'd' in времяjson:
                время += период(days=int(времяjson['d']))
            if 's' in времяjson:
                время += период(seconds=int(времяjson['s']))
            return время

        if 'n' not in деревоЗадач:
            return

        self.имя = деревоЗадач['n']

        if 'ko' in деревоЗадач:
            self.задатьКраткоеОписание(деревоЗадач['ko'])
        if 'do' in деревоЗадач:
            self.задатьДетальноеОписание(деревоЗадач['do'])
        if '<' in деревоЗадач:
            self.задатьМинимальноеВремя(времяИзДревовидногоВида(деревоЗадач['<']))
        if '>' in деревоЗадач:
            self.задатьМаксимальноеВремя(времяИзДревовидногоВида(деревоЗадач['>']))
        if 'x' in деревоЗадач:
            self.затратитьВремя(времяИзДревовидногоВида(деревоЗадач['x']))

        if 'l' in деревоЗадач:
            for з in деревоЗадач['l']:
                задача = self.создатьЗадачу('')
                задача.загрузитьИзДерева(з)
        self.деревоЗадачЗанято = False


class ЗадачаНевСписке(Exception):
    pass
