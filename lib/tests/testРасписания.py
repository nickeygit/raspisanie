import unittest
from mock import Mock
from lib.Расписание import *


class TestРасписание(unittest.TestCase):

    def setUp(self):
        self.расписание = Задача("Корень")
        self.расписание.корневаяЗадача = self.расписание
        self.maxDiff = None

    def tearDown(self):
        pass

    def testСозданияЗадачиБезОграниченийИСОрганичениями(self):
        self.assertEqual(None, self.расписание.событиеПередПереключениемЦикла)
        self.assertEqual(None, self.расписание.событиеПослеПереключенияЦикла)
        задача1 = Задача("Задача-1")
        self.assertEqual(None, задача1.максимальноеВремя())
        self.assertEqual(None, задача1.минимальноеВремя())
        задача1 = Задача("Задача-1", период(1), период(1))
        self.assertEqual(период(1), задача1.максимальноеВремя())
        self.assertEqual(период(1), задача1.минимальноеВремя())

        задача1 = self.расписание.создатьЗадачу("Задача-1")
        self.assertEqual(None, задача1.максимальноеВремя())
        self.assertEqual(None, задача1.минимальноеВремя())
        задача1 = self.расписание.создатьЗадачу("Задача-1", период(1), период(1))
        self.assertEqual(период(1), задача1.максимальноеВремя())
        self.assertEqual(период(1), задача1.минимальноеВремя())

    def testЧтобыЗатраченноеВремяНеБылоМеньшеНуля(self):
        задача1 = self.расписание.создатьЗадачу("Задача-1")
        задача1.затратитьВремя(период(seconds=-1))
        self.assertEqual(период(0), задача1.своёЗатраченноеВремя)

    def testВторымПараметромКонструктораЕстьМаксимумАТретьимМинимум(self):
        задача1 = self.расписание.создатьЗадачу("Задача-1", период(1), период(2))
        self.assertEqual(период(1), задача1.своёМаксимальноеВремя)
        self.assertEqual(период(2), задача1.своёМинимальноеВремя)

    def testУдаленияВложенныхЗадач(self):
        задача1 = self.расписание.создатьЗадачу("Задача-1")
        задача11 = задача1.создатьЗадачу("Задача-1-1")
        задача111 = задача11.создатьЗадачу("Задача-1-1-1")

        self.assertEqual(1, len(self.расписание.задачи))
        self.assertEqual(1, len(задача1.задачи))
        self.assertEqual(1, len(задача11.задачи))

        self.расписание.удалитьВложеннуюЗадачу(задача1)

        self.assertEqual(0, len(self.расписание.задачи))
        self.assertEqual(0, len(задача1.задачи))
        self.assertEqual(0, len(задача11.задачи))

    def testИсключениеПриПопыткеУдалитьНеСвоюВложеннуюЗадачу(self):
        задача1 = self.расписание.создатьЗадачу("Задача-1")
        задача11 = задача1.создатьЗадачу("Задача-1-1")
        self.assertRaises(ЗадачаНевСписке, self.расписание.удалитьВложеннуюЗадачу, задача11)

    def testпереименованиеЗадачи(self):
        задача1 = self.расписание.создатьЗадачу("Задача-1")
        задача1.задатьИмя("Задача-2")
        self.assertEqual("Задача-2", задача1.имя)

    def testСменаКраткогоОписания(self):
        задача1 = self.расписание.создатьЗадачу("Задача-1")
        self.assertEqual("", задача1.краткоеОписание)

        задача1.задатьКраткоеОписание("какое-то описание")
        self.assertEqual("какое-то описание", задача1.краткоеОписание)

    def testСменаДетальногоОписания(self):
        задача1 = self.расписание.создатьЗадачу("Задача-1")
        self.assertEqual("", задача1.детальноеОписание)

        задача1.задатьДетальноеОписание("какое-то описание")
        self.assertEqual("какое-то описание", задача1.детальноеОписание)

    def testЗачадиДобавляютсяВНужныеКонтейнеры(self):
        задача1 = self.расписание.создатьЗадачу("Задача-1", период(1))
        задача1.создатьЗадачу("Задача-1-1", период(1))
        задача1.создатьЗадачу("Задача-1-2", период(1))

        self.assertEqual(2, len(self.расписание.задачи[0].задачи))

        задача2 = self.расписание.создатьЗадачу("Задача-2", период(1))
        задача2.создатьЗадачу("Задача-2-1", период(1))

        self.assertEqual(2, len(self.расписание.задачи[0].задачи))
        self.assertEqual(1, len(self.расписание.задачи[1].задачи))

    def testМинимумЗачадиЭтоМинимумИДляМаксимумаЕслиОнЗадан(self):
        задача1 = self.расписание.создатьЗадачу("Задача-1", период(1))
        задача1.задатьМинимальноеВремя(период(3))
        self.assertEqual(период(3), задача1.максимальноеВремя())

    def testМинимумЗачадиЭтоНеМинимумДляМаксимумаЕслиОнНеЗадан(self):
        задача1 = self.расписание.создатьЗадачу("Задача-1")
        задача1.задатьМинимальноеВремя(период(3))
        self.assertEqual(None, задача1.максимальноеВремя())

    def testТратаВремениМеняетСостояниеЗадачи(self):
        self.расписание.проверитьНаПредметКонцаЦикла = Mock()
        задача1 = self.расписание.создатьЗадачу("Задача-1", период(10), период(5))
        self.assertEqual(СостояниеЗадачи.нужноДелать, задача1.состояние())

        задача1.затратитьВремя(период(6))
        self.assertEqual(СостояниеЗадачи.можноДелать, задача1.состояние())

        задача1.затратитьВремя(период(5))
        self.assertEqual(СостояниеЗадачи.нельзяДелать, задача1.состояние())

    def testВложенныеЗадачиМеняютСостояниеИхКонтейнера(self):
        self.расписание.проверитьНаПредметКонцаЦикла = Mock()
        задача1 = self.расписание.создатьЗадачу("Задача-1", период(10), период(5))
        задача11 = задача1.создатьЗадачу("Задача-1-1")
        задача12 = задача1.создатьЗадачу("Задача-1-2")
        задача13 = задача1.создатьЗадачу("Задача-1-3")

        self.assertEqual(СостояниеЗадачи.нужноДелать, задача1.состояние())
        задача11.затратитьВремя(период(2))
        self.assertEqual(СостояниеЗадачи.нужноДелать, задача1.состояние())
        self.assertTrue(задача1.нужноДелать())

        задача12.затратитьВремя(период(4))
        self.assertEqual(СостояниеЗадачи.можноДелать, задача1.состояние())
        self.assertTrue(задача1.можноДелать())

        задача13.затратитьВремя(период(7))
        self.assertEqual(СостояниеЗадачи.нельзяДелать, задача1.состояние())
        self.assertTrue(задача1.нельзяДелать())

    def testсчётчикаЗатраченногоВремениДляГрупп(self):
        self.расписание.проверитьНаПредметКонцаЦикла = Mock()
        задача1 = self.расписание.создатьЗадачу("Задача-1")
        задача11 = задача1.создатьЗадачу("Задача-1-1")
        задача111 = задача11.создатьЗадачу("Задача-1-1-1")
        задача1111 = задача111.создатьЗадачу("Задача-1-1-1-1")

        задача1111.затратитьВремя(период(2))
        self.assertEqual(период(0), задача1111.затраченноеВремяГруппы())

        задача111.затратитьВремя(период(3))
        self.assertEqual(период(2), задача111.затраченноеВремяГруппы())

        задача11.затратитьВремя(период(4))
        self.assertEqual(период(5), задача11.затраченноеВремяГруппы())

        задача1.затратитьВремя(период(5))
        self.assertEqual(период(9), задача1.затраченноеВремяГруппы())


    def testЗадачаБезОграничений_ВСтатусеМожноДелать(self):
        задача1 = self.расписание.создатьЗадачу("Задача-1")
        self.assertTrue(задача1.можноДелать())


    def testСуммаМинимумовВложенныхЗадачЭтоМинимумМинимумаКонтейнера(self):
        задача1 = self.расписание.создатьЗадачу("Задача-1")
        задача11 = задача1.создатьЗадачу("Задача-1-1")
        задача12 = задача1.создатьЗадачу("Задача-1-2")
        задача13 = задача1.создатьЗадачу("Задача-1-3")

        задача11.задатьМинимальноеВремя(период(1))
        self.assertEqual(период(1), задача1.минимальноеВремя())

        задача12.задатьМинимальноеВремя(период(3))
        self.assertEqual(период(4), задача1.минимальноеВремя())

        задача13.задатьМинимальноеВремя(период(2))
        self.assertEqual(период(6), задача1.минимальноеВремя())

        задача1.задатьМинимальноеВремя(период(7))
        self.assertEqual(период(7), задача1.минимальноеВремя())

    def testСуммаМинимумовВложенныхЗадачНеБольшеМаксимумаКонтейнера(self):
        задача1 = self.расписание.создатьЗадачу("Задача-1")
        задача11 = задача1.создатьЗадачу("Задача-1-1")
        задача12 = задача1.создатьЗадачу("Задача-1-2")
        задача13 = задача1.создатьЗадачу("Задача-1-3")

        задача11.задатьМинимальноеВремя(период(1))
        задача12.задатьМинимальноеВремя(период(3))
        задача13.задатьМинимальноеВремя(период(2))

        self.assertEqual(None, задача1.максимальноеВремя())
        задача1.задатьМаксимальноеВремя(период(1))
        self.assertEqual(период(6), задача1.максимальноеВремя())
        задача1.задатьМаксимальноеВремя(период(8))
        self.assertEqual(период(8), задача1.максимальноеВремя())


    def testСуммаМинимумовВложенныхЗадач3гоУровняЭтоМинимумМинимумаКонтейнеровВыше(self):
        задача1 = self.расписание.создатьЗадачу("Задача-1")
        задача11 = задача1.создатьЗадачу("Задача-1-1")
        задача111 = задача11.создатьЗадачу("Задача-1-1-1")
        задача112 = задача11.создатьЗадачу("Задача-1-1-2")
        задача113 = задача11.создатьЗадачу("Задача-1-1-3")

        задача111.задатьМинимальноеВремя(период(1))
        self.assertEqual(период(1), задача1.минимальноеВремя())
        self.assertEqual(период(1), задача11.минимальноеВремя())

        задача112.задатьМинимальноеВремя(период(3))
        self.assertEqual(период(4), задача1.минимальноеВремя())
        self.assertEqual(период(4), задача11.минимальноеВремя())

        задача113.задатьМинимальноеВремя(период(2))
        self.assertEqual(период(6), задача1.минимальноеВремя())
        self.assertEqual(период(6), задача11.минимальноеВремя())

        задача1.задатьМинимальноеВремя(период(7))
        self.assertEqual(период(7), задача1.минимальноеВремя())

        задача11.задатьМинимальноеВремя(период(7))
        self.assertEqual(период(7), задача11.минимальноеВремя())

    def testСуммаМинимумовВложенныхЗадач3гоУровняНеБольшеМаксимумаКонтейнеровВыше(self):
        задача1 = self.расписание.создатьЗадачу("Задача-1")
        задача11 = задача1.создатьЗадачу("Задача-1-1")
        задача111 = задача11.создатьЗадачу("Задача-1-1-1")
        задача112 = задача11.создатьЗадачу("Задача-1-1-2")
        задача113 = задача11.создатьЗадачу("Задача-1-1-3")

        задача111.задатьМинимальноеВремя(период(1))
        задача112.задатьМинимальноеВремя(период(3))
        задача113.задатьМинимальноеВремя(период(2))

        self.assertEqual(None, задача1.максимальноеВремя())
        self.assertEqual(None, задача11.максимальноеВремя())

        задача1.задатьМаксимальноеВремя(период(1))
        self.assertEqual(период(6), задача1.максимальноеВремя())
        задача11.задатьМаксимальноеВремя(период(1))
        self.assertEqual(период(6), задача11.максимальноеВремя())

        задача1.задатьМаксимальноеВремя(период(8))
        self.assertEqual(период(8), задача1.максимальноеВремя())
        задача11.задатьМаксимальноеВремя(период(8))
        self.assertEqual(период(8), задача11.максимальноеВремя())

    def testКаждаяЗадачаИмеетСсылкуНаКорневуюЗадачу(self):
        self.assertEqual(self.расписание, self.расписание.корневаяЗадача)

        задача1 = self.расписание.создатьЗадачу("Задача-1")
        self.assertEqual(self.расписание, задача1.корневаяЗадача)

        задача11 = задача1.создатьЗадачу("Задача-1-1")
        self.assertEqual(self.расписание, задача11.корневаяЗадача)

        задача111 = задача11.создатьЗадачу("Задача-1-1-1")
        self.assertEqual(self.расписание, задача111.корневаяЗадача)

    def testЗавершениеЦиклаОбнуляетВыполненнуюЗадачуАУПревышеннойЗадачиОтнимаетМаксимальноеОграничение(self):
        self.расписание.событиеПередПереключениемЦикла = Mock()
        self.расписание.событиеПослеПереключенияЦикла = Mock()

        задача1 = self.расписание.создатьЗадачу("Задача-1")
        задача11 = задача1.создатьЗадачу("Задача-1-1", период(4), период(2))
        задача12 = задача1.создатьЗадачу("Задача-1-2", период(6), период(3))
        задача13 = задача1.создатьЗадачу("Задача-1-3")
        задача131 = задача13.создатьЗадачу("Задача-1-3-1", период(7), период(5))

        задача11.затратитьВремя(период(2))
        задача12.затратитьВремя(период(4))
        задача131.затратитьВремя(период(3))
        self.assertEqual(период(2), задача11.затраченноеВремя())
        self.assertEqual(период(4), задача12.затраченноеВремя())
        self.assertEqual(период(3), задача131.затраченноеВремя())

        задача131.затратитьВремя(период(9))

        self.assertEqual(1, self.расписание.событиеПередПереключениемЦикла.call_count)
        self.assertEqual(1, self.расписание.событиеПослеПереключенияЦикла.call_count)

        self.assertEqual(период(0), задача11.затраченноеВремя())
        self.assertEqual(период(0), задача12.затраченноеВремя())
        self.assertEqual(период(5), задача131.затраченноеВремя())

    def testЦиклНеЗаканчиваетсяПокаВсеМинимумыНеБудутВыполнены(self):
        self.расписание.событиеПослеПереключенияЦикла = Mock()

        задача1 = self.расписание.создатьЗадачу("Задача-1", период(3), период(1))
        задача2 = self.расписание.создатьЗадачу("Задача-2", None, период(1))
        задача21 = задача2.создатьЗадачу("Задача-2-1", None, период(1))
        задача211 = задача21.создатьЗадачу("Задача-2-1-1", None, период(1))

        задача1.затратитьВремя(период(2))

        self.assertEqual(0, self.расписание.событиеПослеПереключенияЦикла.call_count)

    def testЦиклРасписанияБезМинимумовЗаканчиваетсяПриЛюбойЗатратеВремени(self):
        задача1 = self.расписание.создатьЗадачу("Задача-1")
        задача11 = задача1.создатьЗадачу("Задача-1-1")
        задача12 = задача1.создатьЗадачу("Задача-1-2")
        задача13 = задача1.создатьЗадачу("Задача-1-3")
        задача131 = задача13.создатьЗадачу("Задача-1-3-1")

        задача11.затратитьВремя(период(2))
        self.assertEqual(период(0), задача11.затраченноеВремя())
        self.assertEqual(период(0), задача12.затраченноеВремя())
        self.assertEqual(период(0), задача131.затраченноеВремя())

        задача12.затратитьВремя(период(4))
        self.assertEqual(период(0), задача11.затраченноеВремя())
        self.assertEqual(период(0), задача12.затраченноеВремя())
        self.assertEqual(период(0), задача131.затраченноеВремя())

        задача131.затратитьВремя(период(3))
        self.assertEqual(период(0), задача11.затраченноеВремя())
        self.assertEqual(период(0), задача12.затраченноеВремя())
        self.assertEqual(период(0), задача131.затраченноеВремя())

        задача131.затратитьВремя(период(9))
        self.assertEqual(период(0), задача11.затраченноеВремя())
        self.assertEqual(период(0), задача12.затраченноеВремя())
        self.assertEqual(период(0), задача131.затраченноеВремя())

    def testОкончанияЦиклаДляСложногоДерева(self):
        дерево = {'n': "Корень", "l": [
                    {'n': "Задача-1", "l": [
                        {'n': "Задача-1-1", "l": [
                            {'n': "Задача-1-1-1", "<": {"s": 4*60}, "x": {"s": 7*60}, ">": {"s": 9*60}},
                            {'n': "Задача-1-1-2",                   "x": {"s": 5*60}},
                            {'n': "Задача-1-1-3", "<": {"s": 3*60}, "x": {"s": 9*60}, ">": {"s": 6*60}},
                            ]
                        },
                        ]
                    },
                    {'n': "Задача-2", "l": [
                        {'n': "Задача-2-1", "l": [
                            {'n': "Задача-2-1-1", "<": {"s": 1*60}, "x": {"s": 3*60}, ">": {"s": 2*60}},
                            {'n': "Задача-2-1-2",                   "x": {"s": 7*60}, ">": {"s": 4*60}},
                            {'n': "Задача-2-1-3", "<": {"s": 4*60}, "x": {"s": 4*60-1}},
                            ]
                        },
                        ]
                    },
                ]
            }

        self.расписание.загрузитьИзДерева(дерево)

        self.расписание.событиеПослеПереключенияЦикла = Mock()

        задача = self.расписание.задачи[1].задачи[0].задачи[2]
        задача.затратитьВремя(период(seconds=1))

        self.assertEqual(1, self.расписание.событиеПослеПереключенияЦикла.call_count)

    def testсозданияДереваизРасписания(self):
        задача1 = self.расписание.создатьЗадачу("Задача-1")
        задача11 = задача1.создатьЗадачу("Задача-1-1")
        задача111 = задача11.создатьЗадачу("Задача-1-1-1", период(2, hours=4), период(3))
        задача112 = задача11.создатьЗадачу("Задача-1-1-2")
        задача113 = задача11.создатьЗадачу("Задача-1-1-3", период(hours=3), период(hours=5))

        задача11.затратитьВремя(период(hours=3))
        задача112.затратитьВремя(период(hours=9))

        задача111.задатьКраткоеОписание("что-то короткое")
        задача111.задатьДетальноеОписание("что-то подлиннее")

        дерево = {'n': "Корень", "l": [
                    {'n': "Задача-1", "l": [
                        {'n': "Задача-1-1", "x": {"s": 3600*3}, "l": [
                            {'n': "Задача-1-1-1", ">": {"d": 2, "s": 3600*4}, "<": {"d": 3}, "ko": "что-то короткое",
                                "do": "что-то подлиннее"},
                            {'n': "Задача-1-1-2", "x": {"s": 3600*9}},
                            {'n': "Задача-1-1-3", ">": {"s": 3600*3}, "<": {"s": 3600*5}},
                            ]
                        },
                        ]
                    },
                ]
            }

        self.assertDictEqual(дерево, self.расписание.экспортДерева())

    def testсозданияРасписанияИзДерева(self):
        дерево = {'n': "Корень", "l": [
                    {'n': "Задача-1", "l": [
                        {'n': "Задача-1-1", "x": {"s": 3600*3}, "l": [
                            {'n': "Задача-1-1-1", ">": {"d": 2, "s": 3600*4}, "<": {"d": 3}, "ko": "что-то короткое",
                                "do": "что-то подлиннее"},
                            {'n': "Задача-1-1-2", "x": {"s": 3600*9}},
                            {'n': "Задача-1-1-3", ">": {"s": 3600*3}, "<": {"s": 3600*5}},
                            ]
                        },
                        ]
                    },
                ]
            }
        self.расписание.загрузитьИзДерева(дерево)

        задача1 = self.расписание.задачи[0]
        self.assertEqual("Задача-1", задача1.имя)

        задача11 = задача1.задачи[0]
        self.assertEqual("Задача-1-1", задача11.имя)
        self.assertEqual(период(hours=3), задача11.своёЗатраченноеВремя)

        задача111 = задача11.задачи[0]
        self.assertEqual("Задача-1-1-1", задача111.имя)
        self.assertEqual(период(2, hours=4), задача111.своёМаксимальноеВремя)
        self.assertEqual(период(3), задача111.своёМинимальноеВремя)
        self.assertEqual("что-то короткое", задача111.краткоеОписание)
        self.assertEqual("что-то подлиннее", задача111.детальноеОписание)

        задача112 = задача11.задачи[1]
        self.assertEqual("Задача-1-1-2", задача112.имя)
        self.assertEqual(период(hours=9), задача112.своёЗатраченноеВремя)
        self.assertEqual(None, задача112.своёМинимальноеВремя)
        self.assertEqual(None, задача112.своёМаксимальноеВремя)
        self.assertEqual("", задача112.краткоеОписание)
        self.assertEqual("", задача112.детальноеОписание)

        задача113 = задача11.задачи[2]
        self.assertEqual("Задача-1-1-3", задача113.имя)
        self.assertEqual(период(hours=3), задача113.своёМаксимальноеВремя)
        self.assertEqual(период(hours=5), задача113.своёМинимальноеВремя)
        self.assertEqual(период(0), задача113.своёЗатраченноеВремя)

    def testсозданияРасписанияИзДереваГдеПервыйЖеЭлементМожетПрокрутитьЦиклНоЭтоЕщёНеВсёДерево(self):
        дерево = {'n': "Корень", "l": [
            {'n': "Задача-1", "<": {"s": 1*60}, "x": {"s": 3*60}, ">": {"s": 5*60} },
            {'n': "Задача-2", "<": {"d": 1} },
                ]
            }
        self.расписание.загрузитьИзДерева(дерево)

        задача1 = self.расписание.задачи[0]
        self.assertEqual("Задача-1", задача1.имя)
        self.assertEqual(период(minutes=3), задача1.своёЗатраченноеВремя)
        self.assertEqual(период(minutes=1), задача1.своёМинимальноеВремя)
        self.assertEqual(период(minutes=5), задача1.своёМаксимальноеВремя)

        задача2 = self.расписание.задачи[1]
        self.assertEqual("Задача-2", задача2.имя)
        self.assertEqual(период(0), задача2.своёЗатраченноеВремя)
        self.assertEqual(период(days=1), задача2.своёМинимальноеВремя)
        self.assertEqual(None, задача2.своёМаксимальноеВремя)

    def testсозданияРасписанияИзПустогоДерева_ПростоНичегоНеДелать(self):
        дерево = {}
        self.расписание.загрузитьИзДерева(дерево)

        self.assertEqual(0, len(self.расписание.задачи))
